gcc -Wall -pedantic -std=c11 -ggdb  -I../lib   -c -o setTest.o setTest.c
gcc -Wall -pedantic -std=c11 -ggdb  -I../lib setTest.o set.o ../lib/file.o ../lib/mem.o  -o setTest
./setTest < test.txt
Create set...

Testing set_insert...

Test with null set good key good item...
Test with good key null item...
Test with good set, null key good item...
Test with null set, null key, null item...

Count (should be zero): 0

Testing set_insert...
Insert name: 
Insert key: 
Insert name: 
Insert key: 
Insert name: 
Insert key: 
Insert name: 
Insert key: 
Insert name: 
Insert key: 

If from make test: 
Inserted one,one
Inserted two,two
Inserted three,three
Inserted one,existing (should succeed with duplicate value)
Inserted existing,one (should fail with duplicate key)Testing set_print

If from make test, set should be: {(existing, one),(three, three),(two, two),(one, one),} 
The set:
{(existing, one),(three, three),(two, two),(one, one),}

Testing set_find...
For key [three]: three = three
For key [existing]: one = one
For key [dne]: (null) = (null)
Null set: (null) = (null)
Null key: (null) = (null)
Input key: 
Key is: (null), Item is: (null)

delete the set...
